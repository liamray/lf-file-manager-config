set drawbox true
set icons true
set hidden true
set ignorecase true
set ifs "\n"
set info size
set mouse true
set promptfmt "\033[32;1m%u@\033[34;1m%d\033[0m"
set previewer ~/.config/lf/preview.sh
clearmaps

cmd on-cd ${{
  # recording directories for recent directories view
  recents_dir_file="${HOME}/.config/lf/.recentlocations"
  touch "${recents_dir_file}"
  without_item=$( cat "${recents_dir_file}" | grep -v "^${PWD}$" )

  printf "${PWD}\n${without_item}\n" | head -100 > "${recents_dir_file}"
}}

cmd recent_locations ${{
  locations=$( cat "${HOME}/.config/lf/.recentlocations" || : )
  cd2=$( printf "${locations}" | fzf --layout=reverse-list --info=hidden --border=rounded --border-label=' Recent locations ' || : )
  if [ -d "${cd2}" ]
  then
    lf -remote "send cd \"${cd2}\""  
  fi
}}

cmd esc ${{
  set -e

  lf -remote 'send clear'
  lf -remote 'send setfilter'
  lf -remote 'send unselect'
}}

cmd open_current_dir ${{
  open "$( dirname ${f} )"
}}

cmd f_menu ${{
  menu=$( printf 'F2\nF3\nF4\nF5\nF6\nF7\nF8\nF12' | fzf --layout=reverse-list --info=hidden --border=rounded --border-label=' F-keys ' || : )
}}

cmd make_a_copy ${{
  set -e

  if [ -z "${f}" ] || [ ! -e "${f}" ]
  then
    exit 0
  fi

  file_path_short=$( printf "${f}" | grep -o '.\{1,60\}$' )
  file_name=$( basename "${f}" )

  . "${HOME}/.config/lf/lf-lib.sh"

  if ! new_name=$( read_input "Copy a [${file_path_short}] as:" "" "${file_name}" ) || [ -z "${new_name}" ] || [ "${new_name}" = "${file_name}" ]
  then
    exit 0
  fi

  if [ -f "${f}" ]
  then
    cp "${f}" "${new_name}"
    lf -remote "send select \"${new_name}\""
    printf "*** Made a copy of the [${file_name}] file as [${new_name}] in the [${PWD}] directory\n"
    exit 0
  fi

  if [ -d "${f}" ]
  then
    cp -r "${f}" "${new_name}"
    lf -remote "send select \"${new_name}\""
    printf "*** Made a copy of the [${file_name}] directory as [${new_name}] in the [${PWD}] directory\n"
    exit 0
  fi
}}

cmd copy_item_name_2_clipboard ${{
  set -e

  . "${HOME}/.config/lf/lf-lib.sh"

  # get the clipboard
  if ! current_item=$( read_from_clipboard )
  then
    message_box "Copy from the clipboard is not supported"
    exit
  fi

  # what is in the clipboard?
  short_name=$( printf "${fx}" | sed 's-^.*/--' )
  full_name="${fx}"

  # inverting the content
  if [ "${full_name}" = "${current_item}" ]
  then
    item="${short_name}"
  else
    item="${full_name}"
  fi

  if ! copy_2_clipboard "${item}"
  then
    message_box "Copy to the clipboard is not supported. Please copy this text manually:\n\n${item}"
    exit
  fi

  printf "*** Copied the following to the clipboard: [${item}]\n"
  lf -remote "send echomsg Copied the [${item}] item path to the clipboard"
}}

cmd delete ${{
  set -e

  if [ -z "${fx}" ] || [ -z "${fx}" ]
  then
    exit 0
  fi

  #                           |  file name only | join lines
  file_names=$( printf "${fx}" | sed 's-^.*/--'  | tr -s '\n' ','  )

  # file_names length > 60? 
  if [ "${#file_names}" -gt 60 ]
    then
    file_names=$( printf "${file_names}" | grep -o '.\{1,60\}$' | xargs printf "...%s" )
  fi

  . "${HOME}/.config/lf/lf-lib.sh"

  if yes_no_dialog "Delete confirmation" "Are you sure you want to delete a [${file_names}] item(s)?"
  then
    echo deleting...
    rm -rf -- ${fx}
    printf "*** Deleted the following items:\n%s\n" "${fx}"
  fi
}}

cmd mk_dir ${{
  set -e

  . "${HOME}/.config/lf/lf-lib.sh"

  if ! dir_name=$( read_input "New Directory" "Enter new directory name: " "" ) || [ -z "${dir_name}" ]
  then
    exit 0
  fi

  mkdir "${dir_name}"
  printf "*** Created a [${dir_name}] directory in the [${PWD}] directory\n"
  lf -remote "send select \"$dir_name\""
}}

cmd mk_file ${{
  set -e

  . "${HOME}/.config/lf/lf-lib.sh"

  if ! file_name=$( read_input "New File" "Enter new file name: " "" ) || [ -z "${file_name}" ]
  then
    exit 0
  fi

  vi "${file_name}"
  if [ -f "${file_name}" ]
  then
    printf "*** Created a [${file_name}] file in the [${PWD}] directory\n"
    lf -remote "send select \"${file_name}\""
  fi
}}

cmd rename ${{
  set -e

  if [ -z "${f}" ] || [ ! -e "${f}" ]
  then
    exit 0
  fi

  . "${HOME}/.config/lf/lf-lib.sh"

  short_name=$( basename "${f}" )
  if ! new_name=$( read_input "Rename" "Enter a new name: " "${short_name}" ) || [ -z "${new_name}" ]
  then
    exit 0
  fi

  mv "${short_name}" "${new_name}"
  printf "*** Renamed a [${short_name}] to [${new_name}] in the [${PWD}] directory\n"
  lf -remote "send select \"${new_name}\""
}}

cmd menu ${{
    . "${HOME}/.config/lf/lf-lib.sh"
    menu
}}

cmd view_file ${{
  # file preview
  if [ -n "${f}" ] && [ -f "${f}" ]
  then
    bat -p --theme ansi --paging=always -f "${f}" || batcat -p --theme ansi --paging=always -f "${f}" || less "${f}" || :
  fi

  # show dir size
  if [ -n "${f}" ] && [ -d "${f}" ]
  then
    lf -remote "send calcdirsize"      
  fi
}}

cmd edit_file ${{
  if  [ -n "${f}" ] && [ -f "${f}" ]
  then
    vi "${f}"
  fi
}}

cmd find_files_case_on ${{
  . "${HOME}/.config/lf/lf-lib.sh"
  find_files
}}

cmd find_files_case_off ${{
  . "${HOME}/.config/lf/lf-lib.sh"
  set -x
  find_files "-i"
}}

cmd find_in_files_case_on ${{
  . "${HOME}/.config/lf/lf-lib.sh"
  find_in_files
}}

cmd find_in_files_case_off ${{
  . "${HOME}/.config/lf/lf-lib.sh"
  find_in_files "-i"
}}

cmd zip ${{
  set -eux
  . "${HOME}/.config/lf/lf-lib.sh"

  files=$( printf "${fx}" | sed 's-.*/--g' )
  if zip_name=$( read_input "Creating ZIP" "Zip file name: " "" )
    then zip -r "${zip_name}" ${files}
  fi
}}

cmd unzip ${{
  set -eux
  . "${HOME}/.config/lf/lf-lib.sh"
  if [ "${f}" = "${fx}" ] && yes_no_dialog "Confirmation" "UnZip the ["${f##*/}"] file?"
  then
    unzip "${f}"
  fi
}}

cmd copy_item ${{
  lf -remote 'send copy'
}}

cmd cut_item ${{
  lf -remote 'send cut'
}}

cmd workspace_dir ${{
  . "${HOME}/.config/lf/lf-lib.sh"
  gentle_change_dir "${HOME}/workspaces"
}}

cmd tmp_dir ${{
  . "${HOME}/.config/lf/lf-lib.sh"
  gentle_change_dir "${HOME}/tmp"
}}

cmd self_install_command ${{
  the_command='wget -O /tmp/setup.sh https://raw.githubusercontent.com/liamray/lf-file-manager-config/main/setup.sh && chmod +x /tmp/setup.sh && . /tmp/setup.sh'

  alias c='false'

  case $(uname -s) in
      Linux*)     alias c='xsel --clipboard';;
      Darwin*)    alias c='pbcopy';;
  esac

  if printf "${the_command}" | c
  then
    lf -remote 'send echo The self-installation command has been copied to the clipboard'
  else
    lf -remote 'send echo Cannot copy the self installation command to the clipboard. Copy it manually from the terminal.'
    printf "*** Self installation command:\n\t[${the_command}]\n"
  fi  
}}

map r recent_locations
map R reload
map c copy_item
map v paste
map x cut_item
map f find_files_case_off
map F find_files_case_on
map l filter
map i find_in_files_case_off
map I find_in_files_case_on
map z zip
map Z unzip
map / search
map n search-next
map N search-prev
map . set hidden!
map o !true
map C copy_item_name_2_clipboard
map sn :set sortby natural; set info
map ss :set sortby size; set info size
map st :set sortby time; set info time
map sa :set sortby atime; set info atime
map sc :set sortby ctime; set info ctime
map se :set sortby ext; set info
map q quit

map * invert
map [ jump-prev
map ] jump-next
map '$' shell

map <delete> delete
map <space> :toggle; down
map <up> up
map <m-up> up
map <down> down
map <m-down> down
map <m-3> open_current_dir
map <home> top
map <end> bottom
map <right> open
map <left> updir
map <pgdn> page-down
map <pgup> page-up
map <enter> open
map <esc> esc
map <insert> :toggle; down
map <backtab> open_current_dir

map <f-1> f_menu
map <f-2> menu
map <f-3> view_file
map <f-4> edit_file
map <f-5> make_a_copy
map <f-6> rename
map <f-7> mk_dir
map <f-8> mk_file
map <f-12> self_install_command

# jump to dirs
map \\ cd /
map h cd ~
map w workspace_dir
map t tmp_dir
map T cd /tmp
map d cd ~/Downloads
map D cd ~/Desktop

# adding the current directory to the recent dirs list
on-cd
